{"version":3,"sources":["actions/index.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.js","components/Header.js","components/Input.js","components/Select.js","services/metodosPagamentos&Tags.js","components/Form.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["addExpenses","expense","type","payload","INITIAL_STATE","user","email","userReducer","state","action","currencies","expenses","walletReducer","id","length","rootReducer","combineReducers","wallet","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","Login","password","handleChange","bind","validEmail","handleClick","target","this","setState","name","value","match","props","userLogin","history","push","className","src","alt","width","htmlFor","placeholder","data-testid","onChange","disabled","onClick","React","Component","connect","dispatch","userAction","Header","calcExpense","reduce","acc","exchangeRates","currency","ask","Input","label","Select","options","map","option","key","defaultProps","metodosPagamentos","tags","Form","description","method","tag","loadingCurrencies","event","getExpense","preventDefault","fetch","data","json","a","Object","keys","filter","curr","Wallet","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0be6e36.chunk.js","sourcesContent":["// Coloque aqui suas actions\nexport const USER_ACTION = 'USER_ACTION';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\nexport const ADD_EXPENSES = 'ADD_EXPENSES';\n\nexport const userAction = (email) => (\n  {\n    type: USER_ACTION,\n    payload: email,\n  }\n);\n\nexport const getCurrencies = (currency) => (\n  {\n    type: GET_CURRENCIES,\n    payload: currency,\n  }\n);\n\nexport function fetchCurrencies() {\n  return async (dispatch) => {\n    const data = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const json = await data.json();\n    const currencies = Object.keys(json).filter((curr) => curr !== 'USDT');\n    dispatch(getCurrencies(currencies));\n  };\n}\n\nexport const addExpenses = (expense) => (\n  {\n    type: ADD_EXPENSES,\n    payload: expense,\n  }\n);\n\nexport const addExpenditure = (expense) => async (dispatch) => {\n  const data = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const exchangeRates = await data.json();\n  dispatch(addExpenses({ ...expense, exchangeRates }));\n};\n","import { USER_ACTION } from '../actions';\n\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  user: {\n    email: '',\n  },\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USER_ACTION:\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { GET_CURRENCIES, ADD_EXPENSES } from '../actions';\n\n// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_CURRENCIES:\n    return {\n      ...state, currencies: action.payload,\n    };\n  case ADD_EXPENSES:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        { id: state.expenses.length, ...action.payload }],\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { userAction } from '../actions';\nimport '../css/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.validEmail = this.validEmail.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.name]: target.value,\n    });\n  }\n\n  validEmail() {\n    const PASSWORD_LENGTH = 6;\n    const { email, password } = this.state;\n    const valid = /^\\w+([\\\\.-]?\\w+)*@\\w+([\\\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (email.match(valid) && password.length >= PASSWORD_LENGTH) return false;\n    return true;\n  }\n\n  handleClick() {\n    const { email } = this.state;\n    const { userLogin, history } = this.props;\n    userLogin(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { email, password } = this.state;\n\n    return (\n      <div className=\"walletLogin\">\n        <img src=\"https://image.flaticon.com/icons/png/512/218/218390.png\" alt=\"ícone da carteira\" width=\"100px\" />\n        <h1>Login</h1>\n        <form id=\"form\">\n          <div>\n            <label htmlFor=\"email\" className=\"email\">\n              <input\n                className=\"form-control\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Email\"\n                value={ email }\n                data-testid=\"email-input\"\n                onChange={ this.handleChange }\n              />\n            </label>\n          </div>\n          <div>\n            <label htmlFor=\"password\" className=\"password\">\n              <input\n                className=\"form-control\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Senha\"\n                value={ password }\n                data-testid=\"password-input\"\n                onChange={ this.handleChange }\n              />\n              <p>*Senha com no mínimo 6 carac.</p>\n            </label>\n          </div>\n          <button\n            className=\"btn btn-primary\"\n            type=\"submit\"\n            disabled={ this.validEmail() }\n            onClick={ this.handleClick }\n          >\n            Entrar\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  userLogin: (email) => dispatch(userAction(email)),\n});\n\nLogin.propTypes = {\n  userLogin: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport '../css/Header.css';\n\nclass Header extends Component {\n  render() {\n    const { user, expenses } = this.props;\n\n    const calcExpense = expenses.reduce((acc, { value, exchangeRates, currency }) => (\n      acc + value * exchangeRates[currency].ask), 0);\n\n    return (\n      <header>\n        <img alt=\"Ícone Carteira\" src=\"https://image.flaticon.com/icons/png/512/218/218390.png\" />\n        <h2 data-testid=\"email-field\" className=\"calcCurrency\">\n          Email:\n          {' '}\n          { user.email }\n        </h2>\n        <p data-testid=\"total-field\" className=\"calcCurrency\">\n          Despesa Total: R$\n          {' '}\n          {\n            calcExpense\n          }\n        </p>\n        <p data-testid=\"header-currency-field\" className=\"calcCurrency\">BRL</p>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  user: PropTypes.objectOf(PropTypes.string).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/Input.css';\n\nclass Input extends Component {\n  render() {\n    const { label, name, type, id, onChange, value } = this.props;\n    return (\n      <label htmlFor={ id } className=\"expense\">\n        { label }\n        { ' ' }\n        <input\n          id={ id }\n          type={ type }\n          value={ value }\n          onChange={ onChange }\n          name={ name }\n          className=\"form-control\"\n        />\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n};\n\nexport default Input;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Select extends Component {\n  render() {\n    const { label, options, id, onChange, value } = this.props;\n    return (\n      <label htmlFor={ id }>\n        { label }\n        { ' ' }\n        <select\n          id={ id }\n          value={ value }\n          onChange={ onChange }\n        >\n          { options.map((option) => (\n            <option\n              key={ option }\n              value={ option }\n            >\n              { option }\n            </option>)) }\n        </select>\n      </label>\n    );\n  }\n}\n\nSelect.propTypes = {\n  label: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.any).isRequired,\n  id: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n};\n\nSelect.defaultProps = {\n  value: '',\n};\n\nexport default Select;\n","export const metodosPagamentos = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nexport const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Input from './Input';\nimport Select from './Select';\nimport { metodosPagamentos, tags } from '../services/metodosPagamentos&Tags';\nimport { fetchCurrencies, addExpenses } from '../actions';\n\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const { loadingCurrencies } = this.props;\n    loadingCurrencies();\n  }\n\n  handleChange({ target }) {\n    this.setState({\n      [target.id]: target.value,\n    });\n  }\n\n  async handleClick(event) {\n    const { value, description, currency, method, tag } = this.state;\n    const { getExpense } = this.props;\n    event.preventDefault();\n\n    const data = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const json = await data.json();\n\n    const expenses = {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: json,\n\n    };\n\n    getExpense(expenses);\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <form className=\"addExpense\">\n        <Input\n          label=\"Valor:\"\n          name=\"value\"\n          id=\"value\"\n          type=\"text\"\n          onChange={ this.handleChange }\n          value={ value }\n        />\n\n        <Input\n          label=\"Descrição:\"\n          name=\"description\"\n          id=\"description\"\n          type=\"text\"\n          value={ description }\n          onChange={ this.handleChange }\n        />\n\n        <Select\n          label=\"Moeda:\"\n          name=\"currency\"\n          id=\"currency\"\n          options={ currencies }\n          value={ currency }\n          onChange={ this.handleChange }\n        />\n        <Select\n          label=\"Método de pagamento:\"\n          id=\"method\"\n          options={ metodosPagamentos }\n          value={ method }\n          onChange={ this.handleChange }\n        />\n        <Select\n          label=\"Tag:\"\n          id=\"tag\"\n          options={ tags }\n          value={ tag }\n          onChange={ this.handleChange }\n        />\n        <button type=\"submit\" onClick={ this.handleClick }> Adicionar despesa </button>\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.any).isRequired,\n  loadingCurrencies: PropTypes.func.isRequired,\n  getExpense: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => (\n  {\n    loadingCurrencies: () => dispatch(fetchCurrencies()),\n    getExpense: (expense) => dispatch(addExpenses(expense)),\n  }\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport Header from '../components/Header';\nimport Form from '../components/Form';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}